#include <gtest/gtest.h>
#include <sycl/sycl.hpp>
#include <vector>

#include "Configuration.hpp"
#include "MatrixParser.hpp"
#include "SymmetricMatrix.hpp"
#include "MatrixOperations.hpp"

using namespace sycl;

class MatrixOperationsTest : public ::testing::Test {
protected:
    std::string path_A = "../tests/testData/testMatrixSymmetric20x20.txt";

    std::vector<conf::fp_type> reference_full = {
        1.6657640408280994, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        -1.867370490886279, 1.0376999091272154, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.19914611183120795, -0.07586948005704831, 0.5953893307710155, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.,
        1.4735224749454605, -0.5150608618535686, -0.1192022681193326, 0.8003267002247267, 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.,
        -1.6028097870197007, 0.7977386909867752, -0.08513639374701722, -0.227784314986424, 0.7476231523515287, 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.24420704350067937, -0.030887263662396268, 0.1367730334558757, 0.05925051270406647, -0.20228166224241897,
        0.6872478239845057, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        -0.7287911051789983, 0.38968302343693784, -0.1637507999067884, 0.053903197318873046, 0.07896304921862472,
        -0.08972044480557391, 0.6895876250094596, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        -0.45233955570771045, 0.15289148266781244, 0.1063010511552096, 0.08833162940798224, 0.16095599153520043,
        0.07032002934532353, 0.04939609085347469, 0.6030156329887076, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.5864672203935575, -0.19889877699356115, -0.06271836934597477, 0.041567488680457586, -0.16793270463230367,
        -0.09887987445869781, -0.09414675202919666, 0.04668355708277074, 0.6604453993931569, 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.,
        -1.214815866675166, 0.3898459780438861, 0.04328695233429542, -0.24834946301104777, 0.37696089479787226,
        0.04263872363617916, 0.22679840283622027, -0.04454184326894726, -0.03740553968885156, 0.6689194240743149, 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.,
        -0.06452978654146882, -0.19671704552204153, 0.016934685803442488, 0.06609999311574745, 0.08705939366407818,
        0.20435207173429354, 0.041473126731595526, -0.1076066682207328, 0.09082757150690868, -0.030866302562511883,
        0.5450969269367005, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        -0.4835053905618735, 0.06367770747748655, -0.016872232888549547, 0.08557806557610156, 0.25377564895021315,
        -0.009468973535129316, 0.026916710620823688, -0.1426748160246534, 0.056975455900556665, 0.024641942083905157,
        -0.09019912385792102, 0.6720419644029999, 0., 0., 0., 0., 0., 0., 0., 0.,
        -0.035722206981349945, -0.0039014064627311646, -0.15437907136940324, 0.06058194487581313, -0.06553780909058396,
        -0.09862278024943347, -0.10084403643825769, 0.07232842578092763, -0.011500169230733923, 0.05011948914522925,
        -0.04218646213874998, 0.002974802724725392, 0.5621736711110982, 0., 0., 0., 0., 0., 0., 0.,
        -0.5121929799313414, 0.06483209204107153, 0.039652253842521225, -0.2533424237329566, 0.09544310137620952,
        -0.040037652557466996, 0.07403220647691434, 0.08913891211470794, -0.014516989604505055, -0.10756959320144426,
        -0.017803915575207427, 0.11215477670196489, 0.1622480683499173, 0.45329252048149765, 0., 0., 0., 0., 0., 0.,
        0.8223089440648853, -0.4295486591372394, 0.03278374301469436, 0.06619104741487294, -0.33677294498727706,
        -0.007508548512616446, 0.11767807190352195, -0.17442719146900473, 0.03779056858330437, 0.05609667659433192,
        0.12694701507373443, -0.09661655769623964, 0.06851843225089799, 0.2568573175051897, 0.6185686101862157, 0., 0.,
        0., 0., 0.,
        -1.4125959432193402, 0.7458503622447743, -0.025438907729034343, -0.2945943407795557, 0.11017987748349968,
        -0.2231149582801822, -0.1543399380159271, 0.10042351890275143, -0.21463648335722502, 0.24310865779967827,
        0.11415482571757575, 0.18890481392022973, 0.011948540662789307, 0.2080781779479424, -0.14406336460041286,
        0.5335090572755703, 0., 0., 0., 0.,
        0.08630798722319775, 0.0641246234813392, 0.13372719883529183, -0.21561900607582704, 0.050723064972080324,
        0.049581374963891124, 0.03992914136683658, -0.023418496728814606, 0.10640997879706375, -0.14685820193362736,
        0.0886102846431543, -0.09777126239007916, 0.09041538435907842, -0.07862784636832708, -0.10615195812158397,
        -0.09447940570008909, 0.6116558696637983, 0., 0., 0.,
        -0.23815539352156376, 0.027882817411408908, 0.08592269043378217, 0.07350400687185846, -0.06126589445753152,
        0.041587215831328336, 0.01869653637017538, 0.05432927677513358, 0.04851863274658738, 0.018877938132214455,
        0.058543845677420076, -0.03215736164677074, 0.19798942778583867, -0.0493370733647245, 0.061267358045825206,
        0.051798702199535904, -0.09037719067911298, 0.3783909770957744, 0., 0.,
        -0.14639199469108516, 0.08850784781580527, 0.25305668939715165, -0.09009622557060015, 0.10066423871483436,
        -0.04814851056757609, -0.13931022738591137, -0.1330767666467144, 0.05530588127236755, 0.17970783485046699,
        0.05012480153614738, 0.10405025432275548, 0.09884341748482518, 0.11594233762927035, -0.1519639907829737,
        0.016360438333375527, -0.05365345165890662, -0.19724100054187596, 0.3652777355185053, 0.,
        0.06948950811694611, 0.020673457952659017, -0.0107312445065505, 0.07780540986539938, -0.14578149706599836,
        -0.07726841256169047, 0.029242757305424544, -0.02376402628420735, 0.021543258204936556, -0.08383248706419719,
        -0.19538597575879152, -0.03166168914041607, 0.013145289788925235, 0.1571931633631974, -0.025577484668141724,
        0.09007556308570916, 0.08444313724488695, -0.1427118477334156, -0.15821157009145156, 0.6677540838347235
    };


    std::vector<conf::fp_type> reference_padding = {
        1.6657640408280994, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -1.867370490886279, 1.0376999091272154, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0,
        0.19914611183120795, -0.07586948005704831, 0.5953893307710155, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0,
        1.4735224749454605, -0.5150608618535686, -0.1192022681193326, 0.8003267002247267, 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -1.6028097870197007, 0.7977386909867752, -0.08513639374701722, -0.227784314986424, 0.7476231523515287, 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        0.24420704350067937, -0.030887263662396268, 0.1367730334558757, 0.05925051270406647, -0.20228166224241897,
        0.6872478239845057, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -0.7287911051789983, 0.38968302343693784, -0.1637507999067884, 0.053903197318873046, 0.07896304921862472,
        -0.08972044480557391, 0.6895876250094596, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -0.45233955570771045, 0.15289148266781244, 0.1063010511552096, 0.08833162940798224, 0.16095599153520043,
        0.07032002934532353, 0.04939609085347469, 0.6030156329887076, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0,
        0.5864672203935575, -0.19889877699356115, -0.06271836934597477, 0.041567488680457586, -0.16793270463230367,
        -0.09887987445869781, -0.09414675202919666, 0.04668355708277074, 0.6604453993931569, 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0,
        -1.214815866675166, 0.3898459780438861, 0.04328695233429542, -0.24834946301104777, 0.37696089479787226,
        0.04263872363617916, 0.22679840283622027, -0.04454184326894726, -0.03740553968885156, 0.6689194240743149, 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -0.06452978654146882, -0.19671704552204153, 0.016934685803442488, 0.06609999311574745, 0.08705939366407818,
        0.20435207173429354, 0.041473126731595526, -0.1076066682207328, 0.09082757150690868, -0.030866302562511883,
        0.5450969269367005, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -0.4835053905618735, 0.06367770747748655, -0.016872232888549547, 0.08557806557610156, 0.25377564895021315,
        -0.009468973535129316, 0.026916710620823688, -0.1426748160246534, 0.056975455900556665, 0.024641942083905157,
        -0.09019912385792102, 0.6720419644029999, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -0.035722206981349945, -0.0039014064627311646, -0.15437907136940324, 0.06058194487581313, -0.06553780909058396,
        -0.09862278024943347, -0.10084403643825769, 0.07232842578092763, -0.011500169230733923, 0.05011948914522925,
        -0.04218646213874998, 0.002974802724725392, 0.5621736711110982, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        -0.5121929799313414, 0.06483209204107153, 0.039652253842521225, -0.2533424237329566, 0.09544310137620952,
        -0.040037652557466996, 0.07403220647691434, 0.08913891211470794, -0.014516989604505055, -0.10756959320144426,
        -0.017803915575207427, 0.11215477670196489, 0.1622480683499173, 0.45329252048149765, 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0,
        0.8223089440648853, -0.4295486591372394, 0.03278374301469436, 0.06619104741487294, -0.33677294498727706,
        -0.007508548512616446, 0.11767807190352195, -0.17442719146900473, 0.03779056858330437, 0.05609667659433192,
        0.12694701507373443, -0.09661655769623964, 0.06851843225089799, 0.2568573175051897, 0.6185686101862157, 0., 0.,
        0., 0., 0., 0., 0., 0., 0,
        -1.4125959432193402, 0.7458503622447743, -0.025438907729034343, -0.2945943407795557, 0.11017987748349968,
        -0.2231149582801822, -0.1543399380159271, 0.10042351890275143, -0.21463648335722502, 0.24310865779967827,
        0.11415482571757575, 0.18890481392022973, 0.011948540662789307, 0.2080781779479424, -0.14406336460041286,
        0.5335090572755703, 0., 0., 0., 0., 0., 0., 0., 0,
        0.08630798722319775, 0.0641246234813392, 0.13372719883529183, -0.21561900607582704, 0.050723064972080324,
        0.049581374963891124, 0.03992914136683658, -0.023418496728814606, 0.10640997879706375, -0.14685820193362736,
        0.0886102846431543, -0.09777126239007916, 0.09041538435907842, -0.07862784636832708, -0.10615195812158397,
        -0.09447940570008909, 0.6116558696637983, 0., 0., 0., 0., 0., 0., 0,
        -0.23815539352156376, 0.027882817411408908, 0.08592269043378217, 0.07350400687185846, -0.06126589445753152,
        0.041587215831328336, 0.01869653637017538, 0.05432927677513358, 0.04851863274658738, 0.018877938132214455,
        0.058543845677420076, -0.03215736164677074, 0.19798942778583867, -0.0493370733647245, 0.061267358045825206,
        0.051798702199535904, -0.09037719067911298, 0.3783909770957744, 0., 0., 0., 0., 0., 0,
        -0.14639199469108516, 0.08850784781580527, 0.25305668939715165, -0.09009622557060015, 0.10066423871483436,
        -0.04814851056757609, -0.13931022738591137, -0.1330767666467144, 0.05530588127236755, 0.17970783485046699,
        0.05012480153614738, 0.10405025432275548, 0.09884341748482518, 0.11594233762927035, -0.1519639907829737,
        0.016360438333375527, -0.05365345165890662, -0.19724100054187596, 0.3652777355185053, 0., 0., 0., 0., 0,
        0.06948950811694611, 0.020673457952659017, -0.0107312445065505, 0.07780540986539938, -0.14578149706599836,
        -0.07726841256169047, 0.029242757305424544, -0.02376402628420735, 0.021543258204936556, -0.08383248706419719,
        -0.19538597575879152, -0.03166168914041607, 0.013145289788925235, 0.1571931633631974, -0.025577484668141724,
        0.09007556308570916, 0.08444313724488695, -0.1427118477334156, -0.15821157009145156, 0.6677540838347235, 0., 0.,
        0., 0,

        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0


    };
};

TEST_F(MatrixOperationsTest, choleskyKernelFullMatrix) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 20;
    conf::workGroupSize = 20;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky(queue, A.matrixData.data(), 0, 0);
    queue.wait();


    for (size_t i = 0; i < A.matrixData.size(); i++) {
        EXPECT_NEAR(A.matrixData[i], reference_full[i], 1e-12);
    }
}

TEST_F(MatrixOperationsTest, choleskyKernelFullMatrixPadding) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 24;
    conf::workGroupSize = 24;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky(queue, A.matrixData.data(), 0, 0);
    queue.wait();


    EXPECT_EQ(A.matrixData.size(), reference_padding.size());

    for (size_t i = 0; i < A.matrixData.size(); i++) {
        EXPECT_NEAR(A.matrixData[i], reference_padding[i], 1e-12);
    }
}

TEST_F(MatrixOperationsTest, choleskyKernelDiagBlock) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 4;
    conf::workGroupSize = 4;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky(queue, A.matrixData.data(), 5, 1);
    queue.wait();

    std::vector<conf::fp_type> reference_A11 = {
        1.9553671036635423, 0., 0., 0.,
        -0.3029756191673789, 0.7100998561677417, 0., 0.,
        0.787410298394586, -0.06799311275526938, 0.7601889142959711, 0.,
        0.4797797274851484, 0.09254516463315143, 0.05994172521675433, 0.633768593174752

    };

    for (size_t i = 0; i < reference_A11.size(); i++) {
        EXPECT_NEAR(A.matrixData[5 * 4 * 4 + i], reference_A11[i], 1e-12);
    }
}


TEST_F(MatrixOperationsTest, choleskyKernelDiagBlockPadding) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 6;
    conf::workGroupSize = 6;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky(queue, A.matrixData.data(), 9, 3);
    queue.wait();

    std::vector<conf::fp_type> reference_A44 = {
         0.6492026636711377,  0.                  ,  0.                  ,  0.                 , 0.,0.,
        -0.1019473771980525,  0.7800118292993728  ,  0.                  ,  0.                 , 0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.
    };

    for (size_t i = 0; i < reference_A44.size(); i++) {
        EXPECT_NEAR(A.matrixData[9 * 6 * 6 + i], reference_A44[i], 1e-12);
    }
}

// tests for GPU version



TEST_F(MatrixOperationsTest, choleskyKernelFullMatrix_GPU) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 20;
    conf::workGroupSize = 20;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_GPU(queue, A.matrixData.data(), 0, 0);
    queue.wait();


    for (size_t i = 0; i < A.matrixData.size(); i++) {
        EXPECT_NEAR(A.matrixData[i], reference_full[i], 1e-12);
    }
}

TEST_F(MatrixOperationsTest, choleskyKernelFullMatrixPadding_GPU) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 24;
    conf::workGroupSize = 24;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_GPU(queue, A.matrixData.data(), 0, 0);
    queue.wait();


    EXPECT_EQ(A.matrixData.size(), reference_padding.size());

    for (size_t i = 0; i < A.matrixData.size(); i++) {
        EXPECT_NEAR(A.matrixData[i], reference_padding[i], 1e-12);
    }
}

TEST_F(MatrixOperationsTest, choleskyKernelDiagBlock_GPU) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 4;
    conf::workGroupSize = 4;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_GPU(queue, A.matrixData.data(), 5, 1);
    queue.wait();

    std::vector<conf::fp_type> reference_A11 = {
        1.9553671036635423, 0., 0., 0.,
        -0.3029756191673789, 0.7100998561677417, 0., 0.,
        0.787410298394586, -0.06799311275526938, 0.7601889142959711, 0.,
        0.4797797274851484, 0.09254516463315143, 0.05994172521675433, 0.633768593174752

    };

    for (size_t i = 0; i < reference_A11.size(); i++) {
        EXPECT_NEAR(A.matrixData[5 * 4 * 4 + i], reference_A11[i], 1e-12);
    }
}


TEST_F(MatrixOperationsTest, choleskyKernelDiagBlockPadding_GPU) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 6;
    conf::workGroupSize = 6;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_GPU(queue, A.matrixData.data(), 9, 3);
    queue.wait();

    std::vector<conf::fp_type> reference_A44 = {
         0.6492026636711377,  0.                  ,  0.                  ,  0.                 , 0.,0.,
        -0.1019473771980525,  0.7800118292993728  ,  0.                  ,  0.                 , 0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.
    };

    for (size_t i = 0; i < reference_A44.size(); i++) {
        EXPECT_NEAR(A.matrixData[9 * 6 * 6 + i], reference_A44[i], 1e-12);
    }
}


// GPU optimized cholesky

TEST_F(MatrixOperationsTest, choleskyKernelFullMatrix_GPU_optimized) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 20;
    conf::workGroupSize = 20;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_optimizedGPU(queue, A.matrixData.data(), 0, 0);
    queue.wait();


    for (size_t i = 0; i < A.matrixData.size(); i++) {
        EXPECT_NEAR(A.matrixData[i], reference_full[i], 1e-12);
    }
}

TEST_F(MatrixOperationsTest, choleskyKernelFullMatrixPadding_GPU_optimized) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 24;
    conf::workGroupSize = 24;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_optimizedGPU(queue, A.matrixData.data(), 0, 0);
    queue.wait();


    EXPECT_EQ(A.matrixData.size(), reference_padding.size());

    for (size_t i = 0; i < A.matrixData.size(); i++) {
        EXPECT_NEAR(A.matrixData[i], reference_padding[i], 1e-12);
    }
}

TEST_F(MatrixOperationsTest, choleskyKernelDiagBlock_GPU_optimized) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 4;
    conf::workGroupSize = 4;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_optimizedGPU(queue, A.matrixData.data(), 5, 1);
    queue.wait();

    std::vector<conf::fp_type> reference_A11 = {
        1.9553671036635423, 0., 0., 0.,
        -0.3029756191673789, 0.7100998561677417, 0., 0.,
        0.787410298394586, -0.06799311275526938, 0.7601889142959711, 0.,
        0.4797797274851484, 0.09254516463315143, 0.05994172521675433, 0.633768593174752

    };

    for (size_t i = 0; i < reference_A11.size(); i++) {
        EXPECT_NEAR(A.matrixData[5 * 4 * 4 + i], reference_A11[i], 1e-12);
    }
}


TEST_F(MatrixOperationsTest, choleskyKernelDiagBlockPadding_GPU_optimized) {
    queue queue(cpu_selector_v);
    conf::matrixBlockSize = 6;
    conf::workGroupSize = 6;
    SymmetricMatrix A = MatrixParser::parseSymmetricMatrix(path_A, queue);
    queue.wait();

    MatrixOperations::cholesky_optimizedGPU(queue, A.matrixData.data(), 9, 3);
    queue.wait();

    std::vector<conf::fp_type> reference_A44 = {
         0.6492026636711377,  0.                  ,  0.                  ,  0.                 , 0.,0.,
        -0.1019473771980525,  0.7800118292993728  ,  0.                  ,  0.                 , 0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.
    };

    for (size_t i = 0; i < reference_A44.size(); i++) {
        EXPECT_NEAR(A.matrixData[9 * 6 * 6 + i], reference_A44[i], 1e-12);
    }
}